import os
import subprocess
import tempfile
import urlparse

from redis import StrictRedis
from aspen import Response
from badgr import services
from badgr.colors import LIGHTGRAY, all_colors


# Configure shielded.
# ===================

shielded = os.path.join(website.project_root, "shielded", "shielded")


# Configure Redis.
# ================

redis = StrictRedis.from_url(os.environ['REDIS_URL'])
TRANSFORM_TIMEOUT = 60 # seconds


[---]

# Parse and validate input.
# =========================

first = path['first'].lower()[:16]
second = path['second'][:16]
color = qs.get('color', LIGHTGRAY)

if color not in all_colors:
    response = Response(400)
    response.body = "Bad color. Options are: %s." % ", ".join(all_colors)
    response.headers['Content-Type'] = 'text/plain'
    raise response


# Transform tokens per service.
# =============================

transform_key = "%s|%s|%s" % (first, second, color)
transformed = redis.hgetall(transform_key)
if not transformed:

    # Do the transform.
    # =================
    # This probably hits the network.

    transform = services.get(first)
    first, second, color = transform(first, second, color)
    transformed = {"first": first, "second": second, "color": color}
    redis.hmset(transform_key, transformed)
    redis.expire(transform_key, TRANSFORM_TIMEOUT)

first = transformed['first']
second = transformed['second']
color = transformed['color']


# Get PNG data.
# =============
# Cache in Redis.

png_key = "[%s|%s] %s" % (first, second, color)
png_data = redis.get(png_key)

if png_data is None:

    # Draw image.
    # ===========

    with tempfile.NamedTemporaryFile(suffix='.png') as fp:
        subprocess.call([ shielded
                        , "--label", first
                        , "--value", second
                        , "--color", color
                        , "--file", fp.name
                         ])
        png_data = open(fp.name).read()

    redis.set(png_key, png_data)

[---]
{{ png_data }}
